// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  
}



model Users {
  id           String     @id @default(cuid())
  role         Role
  firstName     String
  lastName      String
  email        String     @unique
  password     String
  phone_number String
  address      String
  profile      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lawyer       Lawyer?
  Appointments Appointments[] @relation("ClientAppointments")
  Cases        Cases[]    @relation("ClientCases")
  AvailedServices AvailedService[]
  Ratings      Ratings[]  @relation("ClientRatings")
}

enum Role {
  LAWYER
  CLIENT
}

model Lawyer {
  id                       String       @id @default(cuid())
  user_id                  String       @unique
  profile_description      String
  yoe                      Int
  consultationFee          Int
  specialization           String
  license_number           String
  bar_association_membership String
  website                  String
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  user                     Users        @relation(fields: [user_id], references: [id])
  services                 Services[]
  Appointments             Appointments[] @relation("LawyerAppointments")
  CaseLawyer               CaseLawyer[]
  Hearings                 Hearings[]
  AvailedService         AvailedService[]
  Ratings                  Ratings[]      @relation("LawyerRatings")
}


model Services {
  id          String     @id @default(cuid())
  title       String
  description String
  category    String
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Lawyers     Lawyer[]
  AvailedServices AvailedService[]
}

model Appointments {
  id          String     @id @default(cuid())
  client_id   String
  lawyer_id   String
  description String
  date        DateTime
  status      APPOINTMENT_STATUS
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  client      Users      @relation("ClientAppointments", fields: [client_id], references: [id])
  lawyer      Lawyer     @relation("LawyerAppointments", fields: [lawyer_id], references: [id])
}

enum APPOINTMENT_STATUS {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model Cases {
  id          String       @id @default(cuid())
  client_id   String
  title       String
  description String
  status      CaseStatus
  win         Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  client      Users        @relation("ClientCases", fields: [client_id], references: [id])
  CaseLawyer  CaseLawyer[]
  Hearings    Hearings[]
}

model CaseLawyer {
  id        String   @id @default(cuid())
  case_id   String
  lawyer_id String
  case      Cases    @relation(fields: [case_id], references: [id])
  lawyer    Lawyer   @relation(fields: [lawyer_id], references: [id])
}


enum CaseStatus {
  ACTIVE
  CLOSED
  ONGOING
}

model Hearings {
  id          String     @id @default(cuid())
  case_id     String
  date        DateTime
  status      HearingStatus
  lawyer_id   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  case        Cases      @relation(fields: [case_id], references: [id])
  lawyer      Lawyer     @relation(fields: [lawyer_id], references: [id])
}

enum HearingStatus {
  UPCOMING
  CLOSED
}

model AvailedService {
  id          String     @id @default(cuid())
  service_id  String
  qty         Int
  client_id   String
  lawyer_id   String
  createAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  service     Services   @relation(fields: [service_id], references: [id])
  client      Users      @relation(fields: [client_id], references: [id])
  lawyer      Lawyer     @relation(fields: [lawyer_id], references: [id])
}

model Ratings {
  id          String     @id @default(cuid())
  lawyer_id   String
  client_id   String
  rating      Int
  description String
  lawyer      Lawyer     @relation("LawyerRatings", fields: [lawyer_id], references: [id])
  client      Users      @relation("ClientRatings", fields: [client_id], references: [id])
}
